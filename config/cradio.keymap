// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// ==== MOUSE-KEY <section begins> ====
#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1250
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 100

#include <dt-bindings/zmk/mouse.h>

&mmv {
  acceleration-exponent = <1>;      // 1
  time-to-max-speed-ms = <1500>;    // 40
  delay-ms = <0>;                   // 0
};

&msc {
  acceleration-exponent = <1>;      // 0
  time-to-max-speed-ms = <5000>;    // 40
  delay-ms = <0>;                   // 10
};
// ==== MOUSE-KEY <section ends> =====

#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 150

#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS) \
  combo_##NAME { \
    timeout-ms = <20>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <LAYERS>; \
  };

/ {
    behaviors {

    /* Left hand key positions for use with right hand mods */
    #define KEYS_L \
        /*    ┌────┬────┬────┬────┬────┐                                       */ \
                0    1    2    3    4                                             \
        /*    ├────┼────┼────┼────┼────┤                                       */ \
                10   11   12   13   14                                            \
        /*    ├────┼────┼────┼────┼────┤                                       */ \
                20   21   22   23   24
        /*    └────┴────┴────┴────┴────┘                                       */

    /* Right hand key positions for use with left hand mods */
    #define KEYS_R \
        /*                                          ┌────┬────┬────┬────┬────┐ */ \
                                                      5    6    7    8    9       \
        /*                                          ├────┼────┼────┼────┼────┤ */ \
                                                      15   16   17   18   19      \
        /*                                          ├────┼────┼────┼────┼────┤ */ \
                                                      25   26   27   28   29      \
        /*                                          └────┴────┴────┴────┴────┘ */

    /* Thumb key positions for use with mods on both hands */
    #define KEYS_T \
        /*                 ┌────┬────┐      ┌────┬────┐              */ \
                             30   31          32   33
        /*                 └────┴────┘      └────┴────┘              */  

    // Positional Homerow mods
    // Homerow mods that prevent accidental activations when rolling keys,
    // such as when typing `st` or `ne` on colemak-dh layouts or `as` on
    // qwerty.
    //
    // Works by only allowing a mod to activate within tapping-term if
    // it's on the opposite side of the keyboard or on the same side thumb
    // keys.

    // Further optimization using urob's timerless homerow mods method:
    // https://github.com/urob/zmk-config#timeless-homerow-mods
    hm_l: homerow_mods_left {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        bindings = <&kp>,  <&kp>;

        flavor = "balanced";
        tapping-term-ms = <HM_TAPPING_TERM>;
        quick-tap-ms = <175>;                // repeat on tap-into-hold
        require-prior-idle-ms = <HM_PRIOR_IDLE>;

        hold-trigger-key-positions = <KEYS_R KEYS_T>;
        hold-trigger-on-release;
    };

    hm_r: homerow_mods_right {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;

        flavor = "balanced";
        tapping-term-ms = <HM_TAPPING_TERM>;
        quick-tap-ms = <175>;
        require-prior-idle-ms = <HM_PRIOR_IDLE>;

        hold-trigger-key-positions = <KEYS_L KEYS_T>;
        hold-trigger-on-release;
    };

    // Positional Homerow mods for shift
    // Use faster tapping term and disable some features that may
    // cause false negatives.
    hm_shift_l: hm_shift_l {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;

        flavor = "balanced";
        tapping-term-ms = <HM_TAPPING_TERM_FAST>;
        quick-tap-ms = <175>;
        require-prior-idle-ms = <HM_PRIOR_IDLE>;

        hold-trigger-key-positions = <KEYS_R KEYS_T>;
        // hold-trigger-on-release;
    };

    hm_shift_r: hm_shift_r {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;

        flavor = "balanced";
        tapping-term-ms = <HM_TAPPING_TERM_FAST>;
        quick-tap-ms = <175>;
        require-prior-idle-ms = <HM_PRIOR_IDLE>;

        hold-trigger-key-positions = <KEYS_L KEYS_T>;
        // hold-trigger-on-release;
    };

    layer_hold_left: layer_hold_left {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        bindings = <&mo>,  <&kp>;

        flavor = "balanced";
        tapping-term-ms = <HM_TAPPING_TERM>;
        quick-tap-ms = <175>;                // repeat on tap-into-hold
        require-prior-idle-ms = <HM_PRIOR_IDLE>;

        hold-trigger-key-positions = <KEYS_R KEYS_T>;
        hold-trigger-on-release;
    };

    layer_hold_right: layer_hold_right {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        bindings = <&mo>,  <&kp>;

        flavor = "balanced";
        tapping-term-ms = <HM_TAPPING_TERM>;
        quick-tap-ms = <175>;                // repeat on tap-into-hold
        require-prior-idle-ms = <HM_PRIOR_IDLE>;

        hold-trigger-key-positions = <KEYS_L KEYS_T>;
        hold-trigger-on-release;
    };

    td_sticky_toggle1: td_sticky_toggle1 {
        compatible = "zmk,behavior-tap-dance";
        label = "Tap Dance Sticky Toggle 1";
        #binding-cells = <0>;
        tapping-term-ms = <200>; // Adjust based on your tapping speed
        bindings = <&sl 1>, <&tog 1>;
    };

    td_sticky_toggle2: td_sticky_toggle2 {
        compatible = "zmk,behavior-tap-dance";
        label = "Tap Dance Sticky Toggle 2";
        #binding-cells = <0>;
        tapping-term-ms = <200>; // Adjust based on your tapping speed
        bindings = <&sl 2>, <&tog 2>;
    };

    td_sticky_toggle3: td_sticky_toggle3 {
        compatible = "zmk,behavior-tap-dance";
        label = "Tap Dance Sticky Toggle 3";
        #binding-cells = <0>;
        tapping-term-ms = <200>; // Adjust based on your tapping speed
        bindings = <&sl 3>, <&tog 3>;
    };

    td_2_0: td_2_0 {
        compatible = "zmk,behavior-tap-dance";
        label = "Tap Dance 2 0";
        #binding-cells = <0>;
        tapping-term-ms = <200>; // Adjust based on your tapping speed
        bindings = <&kp KP_N2>, <&kp KP_N0>;
    };

    ctrl_hold_layer: ctrl_hold_layer {
        compatible = "zmk,behavior-macro-one-param";
        label = "Custom Layer and Control Hold";
        #binding-cells = <1>;
        bindings=<&macro_param_1to1>, <&macro_press &mo>, <&macro_press &kp LCTRL>, <&macro_pause_for_release>, <&macro_param_1to1>, <&macro_release &mo>, <&macro_release &kp LCTRL>;
    };

    ctrl_hold_tap_layer: ctrl_hold_tap_layer {
        compatible = "zmk,behavior-hold-tap";
        label = "Layer1 Ctrl Hold Tap";
        #binding-cells = <2>;
        tapping-term-ms = <200>; // Adjust as needed
        bindings=<&ctrl_hold_layer>, <&kp>;
    };

    ht_mo_sl: ht_mo_sl {
        compatible = "zmk,behavior-hold-tap";
        label = "Hold and tap layer mo sl";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        bindings=<&mo>, <&sl>;
    };

    ht_kp_sl: ht_kp_sl {
        compatible = "zmk,behavior-hold-tap";
        label = "Hold and tap layer kp sl";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        bindings=<&kp>, <&sl>;
    };

    td_layer_select1: td_layer_select1 {
        compatible = "zmk,behavior-tap-dance";
        label = "Tap Dance Layer 1";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&sl 1>, <&to 1>;
    };

    td_layer_select2: td_layer_select2 {
        compatible = "zmk,behavior-tap-dance";
        label = "Tap Dance Layer 2";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&ht_kp_sl RSHIFT 2>, <&to 2>;
    };

    /*
    * Non-Positional Homerow Mods
    * Used for &mm_grescm_gui behavior on left hand.
    *
    * Usage: &hm LSHFT T
    * Tap: T
    * Tap-Tap-Hold: Repeat T
    * Hold: LSHIFT
    */
    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;

        flavor = "balanced";
        tapping-term-ms = <HM_TAPPING_TERM>;
        quick-tap-ms = <200>;
    };
    };

    combos {
        compatible = "zmk,combos";

        COMBO(go_layer_3, &to 3, 31 32, 0 1 2 4)
        COMBO(go_default_layer1, &to 0, 31 32, 3)
        COMBO(go_default_layer2, &to 0, 14 15, 0 1 2 3 4)
        COMBO(go_magic_layer, &to 4, 31 20, 0 1 2 3 4)
        COMBO(press_enter_key, &kp RET, 13 16, 0 1 2 3 4)
    };
};

    //╭──────┬──────┬──────┬──────┬──────╮   ╭──────┬──────┬──────┬──────┬──────╮    
    //|   0  |   1  |   2  |   3  |   4  |   |   5  |   6  |   7  |   8  |   9  |
    //├──────┼──────┼──────┼──────┼──────┤   ├──────┼──────┼──────┼──────┼──────┤
    //|  10  |  11  |  12  |  13  |  14  |   |  15  |  16  |  17  |  18  |  19  |
    //├──────┼──────┼──────┼──────┼──────┤   ├──────┼──────┼──────┼──────┼──────┤
    //|  20  |  21  |  22  |  23  |  24  |   |  25  |  26  |  27  |  28  |  29  |
    //╰──────┴──────┼──────┼──────┼──────┤   ├──────┼──────┼──────┴──────┴──────╯
    //                     |  30  |  31  |   |  32  |  33  |
    //                     ╰──────┴──────╯   ╰──────┴──────╯

/ {

    keymap {
        compatible = "zmk,keymap";
        layer_Base {
            bindings = <
                &kp Q           &layer_hold_left 2 W    &layer_hold_left 1 E    &kp R               &kp T       /*|*/       &kp Y       &kp U           &layer_hold_right 1 I       &layer_hold_right 2 O   &kp SEMI
                &hm_l LGUI A    &hm_l LALT S            &hm_shift_l LSHIFT D    &hm_l LCTRL F       &kp G       /*|*/       &kp H       &hm_r RCTRL J   &hm_shift_r RSHIFT K        &hm_r RALT L            &hm_r RGUI P
                &kp Z           &kp X                   &layer_hold_left 3 C    &kp V               &kp B       /*|*/       &kp N       &kp M           &layer_hold_right 3 COMMA   &kp DOT                 &kp FSLH
                                                                                &td_layer_select1   &kp BSPC    /*|*/       &kp SPACE   &mt RSHFT RET
            >;
        };

        // &td_layer_select1   &kp BSPC    /*|*/       &kp SPACE   &mt RSHFT RET
        // &kp BSPC      &td_layer_select1 /*|*/     &mt RSHFT RET &kp SPACE

        layer_Lower {
            bindings = <
                &kp EXCL        &kp ESC                 &kp UP                  &kp TAB             &kp GRAVE   /*|*/       &kp F5      &kp LBRC         &kp RBRC                   &caps_word              &kp SQT
                &kp AT          &kp LEFT                &kp DOWN                &kp RIGHT           &kp AMPS    /*|*/       &kp F10     &hm_r RCTRL LPAR &hm_shift_r RSHIFT RPAR    &hm_r RALT DQT          &hm_r RGUI SQT 
                &kp HASH        &kp DLLR                &kp PRCNT               &kp TILDE           &kp PIPE    /*|*/       &kp F11     &kp LBKT         &kp RBKT                   &kp UNDER               &kp BSLH
                                                                                &to 0               &trans      /*|*/       &trans      &td_layer_select2
            >;
        };

        // &to 0               &trans      /*|*/       &trans      &td_layer_select2
        // &trans              &to 0       /*|*/       &td_layer_select2 &trans      

        layer_NumSymbol {
            bindings = <
                &kp EXCL        &kp LBRC                &kp ESC                 &kp RBRC            &kp PIPE    /*|*/       &kp STAR    &kp KP_N7         &kp KP_N8                 &kp KP_N9               &kp BSLH        
                &hm_l LGUI HASH &hm_l LALT LPAR         &hm_shift_l LSHIFT TAB  &hm_l LCTRL RPAR    &kp AMPS    /*|*/       &kp PLUS    &hm_r RCTRL KP_N4 &hm_shift_r RSHIFT KP_N5  &hm_r RALT KP_N6        &hm_r RGUI MINUS
                &kp PRCNT       &kp LBKT                &kp GRAVE               &kp RBKT            &kp CARET   /*|*/       &kp EQUAL   &kp KP_N1         &td_2_0                   &kp KP_N3               &kp UNDER  
                                                                                &to 0               &trans      /*|*/       &trans      &trans
            >;
        };

        layer_Mouse {
            bindings = <
                &msc SCRL_UP    &mkp MB2                &mmv MOVE_UP            &mkp MB1             &none       /*|*/       &none       &mkp MB1         &mmv MOVE_UP              &mkp MB2                &msc SCRL_UP
                &msc SCRL_DOWN  &mmv MOVE_LEFT          &mmv MOVE_DOWN          &mmv MOVE_RIGHT      &none       /*|*/       &none       &mmv MOVE_LEFT   &mmv MOVE_DOWN            &mmv MOVE_RIGHT         &msc SCRL_DOWN
                &msc SCRL_UP    &mkp MB4                &mkp MB3                &mkp MB5             &none       /*|*/       &none       &mkp MB4         &mkp MB3                  &mkp MB5                &msc SCRL_UP
                                                                                &to 0                &trans      /*|*/       &trans      &trans
            >;
        };
        layer_Magic {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        //│ RESET    │          │          │          │PROFILE 0 │   │          │          │          │          │  RESET   │
           &sys_reset  &trans     &trans     &trans    &bt BT_SEL 0    &trans     &trans     &trans     &trans    &sys_reset
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│BOOTLOADER│          │          │          │PROFILE 1 │   │          │          │          │          │BOOTLOADER│
          &bootloader  &trans     &trans     &trans    &bt BT_SEL 1    &trans     &trans     &trans     &trans    &bootloader
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│          │          │          │ CLEAR BT │PROFILE 2 │   │          │          │          │          │          │
            &trans     &trans     &trans    &bt BT_CLR &bt BT_SEL 2    &trans     &trans     &trans     &trans     &trans
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                               &to 0     &trans         &trans     &trans
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };
    };
};
